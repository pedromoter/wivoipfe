import { Component } from "react";
import { appContext } from "./appContext";
import autobind from 'class-autobind';
import React from "react";

import {
    Button,
    Card,
    CardHeader,
    CardTitle,
    CardImg,
    CardBody,
    CardFooter,
    Modal, ModalBody, ModalHeader
  } from "shards-react";
  import Video , { LocalDataTrack } from 'twilio-video';

export class VideoComponent extends Component {
    constructor(props) {
        super(props);
        autobind(this);
    }
    private dt =  new LocalDataTrack();
    private iframe : any =  React.createRef();
    state = {
        identity: null,  /* Will hold the fake name assigned to the client. The name is generated by faker on the server */
        roomName: '',    /* Will store the room name */
        roomNameErr: false,  /* Track error for room name TextField. This will    enable us to show an error message when this variable is true */
        previewTracks: null,
        localMediaAvailable: false, /* Represents the availability of a LocalAudioTrack(microphone) and a LocalVideoTrack(camera) */
        hasJoinedRoom: false,
        activeRoom: null, // Track the current active room,
        token : null,

     };
  
     componentDidMount() {
         console.log(this.context)
        this.joinRoom();
      }

      private handleScrool (e){
        console.log(e)

        this.dt.send("scrool")
      }

      private joinRoom() {
             console.log("Joining room '" + this.context.roomName + "'...");
             let connectOptions = {
                 name: this.context.roomName,
                 tracks : undefined
                };

                if(this.context.host){
                  connectOptions.tracks = [this.dt]
                }
             if (this.state.previewTracks) {
                 connectOptions.tracks = this.state.previewTracks;
             }

     
             console.log("Connect opotios",connectOptions)
             Video.connect(this.context.token, connectOptions).then(this.didJoinRoom, error => {
                // alert('Could not connect to Twilio: ' + error.message);
                console.log(error)
              });

            }

           private  attachTracks(tracks, container) {
               console.log(tracks)
                tracks.forEach(track => {
                  if(track){
                    container.appendChild(track.attach());
                  }
                });
              }
              
              // Attach the Participant's Tracks to the DOM.
              attachParticipantTracks(participant, container) {
                var tracks = Array.from(participant.tracks.values());
                this.attachTracks(tracks, container);
              }

            private didJoinRoom(room){
              
                console.log("Joined as '" + this.context.username + "'");
  this.setState({
    activeRoom: room,
    localMediaAvailable: true,
    hasJoinedRoom: true  // Removes ‘Join Room’ button and shows ‘Leave Room’
  });

  // Attach LocalParticipant's tracks to the DOM, if not already attached.
  this.iframe.current.contentWindow.onscrool = this.handleScrool;


  var previewContainer =  this.refs.localMedia as any ;
  if (!previewContainer.querySelector('video')) {
    this.attachParticipantTracks(room.localParticipant, previewContainer);
  }



  room.on('participantConnected', participant => {
    console.log("Joining: '" + participant.identity + "'");
  });

  // When a Participant adds a Track, attach it to the DOM.
  room.on('trackAdded', (track, participant) => {
    console.log(participant.identity + ' added track: ' + track.kind);

    if (track.kind === 'data') {
      track.on('message', data => {
        console.log(data);
      });
    }
    
    var previewContainer = this.refs.remoteMedia;
    this.attachTracks([track], previewContainer);
  });
}
      render(){
       let showLocalTrack = this.state.localMediaAvailable ? (
         <div className="flex-item"><div ref="localMedia" /> </div>) : '';   
       /*
        Controls showing of ‘Join Room’ or ‘Leave Room’ button.  
        Hide 'Join Room' button if user has already joined a room otherwise 
        show `Leave Room` button.
       */
    //    let joinOrLeaveRoomButton = this.state.hasJoinedRoom ? (
    //    <Button label="Leave Room" secondary={true} onClick={() => alert("Leave Room")}  />) 
       return (
        
           <div className="flex-container">
             <h1>Code {this.context.roomName} </h1>
             <iframe  style={{
               width : '100%',
               height : 500
             }}
            src={this.context.roomName}
             //src={"http://localhost:3000/file/"+this.context.roomName}
             ref={ this.iframe }>
             </iframe>
         {showLocalTrack} {/* Show local track if available */}
         <div className="flex-item">
         <div className="flex-item" ref="remoteMedia" id="remote-media" />
       </div>
       </div>);

      }


}
VideoComponent.contextType = appContext;